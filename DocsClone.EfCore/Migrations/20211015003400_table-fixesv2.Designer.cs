// <auto-generated />
using System;
using DocsClone.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DocsClone.EfCore.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211015003400_table-fixesv2")]
    partial class tablefixesv2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DocsClone.Domain.Entities.Detail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedWithTimezone")
                        .HasColumnType("int")
                        .HasColumnName("created_with_timezone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_modified");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<int>("ModifiedWithTimezone")
                        .HasColumnType("int")
                        .HasColumnName("modified_with_timezone");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("PrimaryContactNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primary_contact_number");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("surname");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("DocsClone.Domain.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("document_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int")
                        .HasColumnName("access_level");

                    b.Property<string>("CurrentVersion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("current_revision");

                    b.HasKey("Id");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("DocsClone.Domain.Entities.Revision", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("revision_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<int>("CreatedWithTimezone")
                        .HasColumnType("int")
                        .HasColumnName("created_with_timezone");

                    b.Property<string>("DocumentData")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("document_data");

                    b.Property<long?>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DocumentOwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentVersion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("document_version");

                    b.Property<string>("Modifications")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modifications");

                    b.Property<long?>("ModifiedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_on");

                    b.Property<int>("ModifiedWithTimezone")
                        .HasColumnType("int")
                        .HasColumnName("modified_with_timezone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentOwnerId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("revisions");
                });

            modelBuilder.Entity("DocsClone.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DocsClone.Domain.Entities.Detail", b =>
                {
                    b.HasOne("DocsClone.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DocsClone.Domain.Entities.Revision", b =>
                {
                    b.HasOne("DocsClone.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DocsClone.Domain.Entities.Document", "Document")
                        .WithMany("Revisions")
                        .HasForeignKey("DocumentId");

                    b.HasOne("DocsClone.Domain.Entities.User", "DocumentOwner")
                        .WithMany()
                        .HasForeignKey("DocumentOwnerId");

                    b.HasOne("DocsClone.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Document");

                    b.Navigation("DocumentOwner");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("DocsClone.Domain.Entities.User", b =>
                {
                    b.HasOne("DocsClone.Domain.Entities.Document", null)
                        .WithMany("User")
                        .HasForeignKey("DocumentId");
                });

            modelBuilder.Entity("DocsClone.Domain.Entities.Document", b =>
                {
                    b.Navigation("Revisions");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
